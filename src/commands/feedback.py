import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (filters,
                          MessageHandler,
                          ConversationHandler,
                          CommandHandler,
                          ContextTypes,
                          CallbackQueryHandler)

from config import Config
from crud.feedback import (create_feedback,
                               create_feedback_reply,
                               mark_feedback_read,
                               get_feedback_by_id)
from crud.user import create_or_update_user
from handlers.canel_conversation import cancel, cancel_keyboard
from utils.db_utils import get_session
from utils.message_utils import escape_md2, escape_md2_no_links, send_typing_action

GET_MESSAGE, REPLY_START, SUBMIT_SENDING = 1, 2, 3


@send_typing_action
async def write_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    user = update.effective_user
    context.user_data['command_msg'] = message

    async with get_session() as session:
        await create_or_update_user(session, user)

    context.user_data['markup_msg'] = await message.reply_text('–û–∫, –Ω–∞–ø–∏—à–∏ —Å–≤—ñ–π —Ñ—ñ–¥–±–µ–∫ –Ω–∏–∂—á–µ:',
                                                               reply_markup=cancel_keyboard)

    return GET_MESSAGE


@send_typing_action
async def feedback_get_user_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    user = update.effective_user
    markup_msg = context.user_data['markup_msg']

    await markup_msg.edit_reply_markup()

    async with get_session() as session:
        feedback_model = await create_feedback(session=session,
                                               user_id=user.id,
                                               msg_id=message.message_id,
                                               msg_text=message.text)

    # Firstly send to developer feedback
    to_dev_text = (f"–§—ñ–¥–±–µ–∫ –≤—ñ–¥ {user.name}:\n\n{message.text}\n\n"
                   f"–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ñ—ñ–¥–±–µ–∫? ({Config.FEEDBACK_REPLY_COMMAND}{feedback_model.id})")

    await context.bot.send_message(Config.OWNER_ID, text=escape_md2(to_dev_text),
                                   parse_mode=ParseMode.MARKDOWN_V2)

    # Inform user that feedback sent
    if Config.DEBUG_FLAG or user.id != Config.OWNER_ID:
        to_user_text = f'‚úÖ –®–∏–∫, —É–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ [—Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É](tg://user?id={Config.OWNER_ID})!'
        await message.reply_text(escape_md2_no_links(to_user_text), parse_mode=ParseMode.MARKDOWN_V2)

    context.user_data.clear()
    return ConversationHandler.END


@send_typing_action
async def reply_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    user = update.effective_user

    if user.id != Config.OWNER_ID:
        await message.reply_text('‚ùå –ù–æ-–Ω–æ-–Ω–æ... –í —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏!')
        return ConversationHandler.END

    context.user_data['command_msg'] = message

    feedback_id = int(message.text.replace(Config.FEEDBACK_REPLY_COMMAND, ''))

    async with get_session() as session:
        feedback_model = await get_feedback_by_id(session, feedback_id)

    if not feedback_model:
        await message.reply_markdown_v2(escape_md2(f'–î–∏–≤–Ω–æ –Ω–µ–º–∞—î —Ñ—ñ–¥–±–µ–∫—É —ñ–∑ id=`{feedback_id}`', ['`']))
        context.user_data.clear()
        return ConversationHandler.END

    context.user_data['feedback_model'] = feedback_model

    name = escape_md2(feedback_model.user.first_name)
    response_text = (f'–ü–∏—à–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É [{name}](tg://user?id={feedback_model.user.id}) '
                     f'–Ω–∞ —Ñ—ñ–¥–±–µ–∫:\n\n{feedback_model.msg_text}')

    context.user_data['markup_msg'] = await message.reply_text(escape_md2_no_links(response_text, ['`']),
                                                               parse_mode=ParseMode.MARKDOWN_V2,
                                                               reply_markup=cancel_keyboard)
    return REPLY_START


@send_typing_action
async def feedback_reply_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message

    markup_msg = context.user_data['markup_msg']
    context.user_data['feedback_reply_text'] = message.text

    await markup_msg.edit_reply_markup()

    confirmation_keyboard = [
        [
            InlineKeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ', callback_data='confirm'),
            InlineKeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ üìù', callback_data='edit')
        ],
        [InlineKeyboardButton('üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='cancel')]
    ]

    reply_keyboard = InlineKeyboardMarkup(confirmation_keyboard)

    await message.reply_text('–í–ø–µ–≤–Ω–µ–Ω–∏–π, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?',
                             reply_markup=reply_keyboard,
                             reply_to_message_id=message.message_id)

    return SUBMIT_SENDING


async def send_reply_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    feedback_model = context.user_data['feedback_model']
    feedback_reply_text = context.user_data['feedback_reply_text']

    response_text = (f"–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –ø–∏—à–µ:\n\n"
                     f"{feedback_reply_text}\n\n"
                     f"P.S. –©–µ —Ä–∞–∑ –¥—è–∫—É—é –∑–∞ —Ñ—ñ–¥–±–µ–∫ üôÉ")

    await query.edit_message_text('üÜó –£–∂–µ –Ω–∞–¥—Å–∏–ª–∞—é...', reply_markup=None)

    await context.bot.send_message(chat_id=feedback_model.user_id,
                                   text=escape_md2(response_text),
                                   parse_mode=ParseMode.MARKDOWN_V2,
                                   reply_to_message_id=feedback_model.msg_id)

    async with get_session() as session:
        await create_feedback_reply(session, feedback_model.id, feedback_model.msg_id, feedback_reply_text)
        await mark_feedback_read(session, feedback_model.id)

    await query.edit_message_text('‚úÖ –ß—É–¥–æ–≤–æ, —è —É–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É!', reply_markup=None)

    context.user_data.clear()

    return ConversationHandler.END


async def edit_reply_feedback_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    edit_text = 'üÜó –ù–∞–¥—ñ—à–ª–∏ —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –∑–º—ñ–Ω–µ–Ω–µ.'
    context.user_data['markup_msg'] = await query.edit_message_text(edit_text, reply_markup=cancel_keyboard)

    return REPLY_START


feedback_handler = ConversationHandler(
    entry_points=[CommandHandler('feedback', write_feedback)],
    states={
        GET_MESSAGE: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            MessageHandler(filters.TEXT, feedback_get_user_text)
        ]
    },
    fallbacks=[
        MessageHandler(filters.ALL, cancel)
    ],
    conversation_timeout=300.0
)

feedback_reply_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex(re.compile(f'{Config.FEEDBACK_REPLY_COMMAND}\\d+')), reply_feedback)],
    states={
        REPLY_START: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            MessageHandler(filters.TEXT, feedback_reply_check)
        ],
        SUBMIT_SENDING: [
            CallbackQueryHandler(cancel, pattern='^cancel$'),
            CallbackQueryHandler(send_reply_feedback, pattern='^confirm$'),
            CallbackQueryHandler(edit_reply_feedback_text, pattern='^edit$')
        ]
    },
    fallbacks=[
        MessageHandler(filters.ALL, cancel)
    ],
    conversation_timeout=300.0
)
